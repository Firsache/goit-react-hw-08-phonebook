{"version":3,"file":"static/js/561.cbd5245b.chunk.js","mappings":"6RAsEA,UArDmB,WACjB,IAAMA,GAAWC,EAAAA,EAAAA,MACXC,GAAaC,EAAAA,EAAAA,IAAYC,EAAAA,GACzBC,GAAQF,EAAAA,EAAAA,IAAYG,EAAAA,IACpBC,GAAUJ,EAAAA,EAAAA,IAAYK,EAAAA,IACtBC,GAAWC,EAAAA,EAAAA,MAUXC,EAAmBC,EAAAA,GAAW,CAClCC,SAAUD,EAAAA,KACPE,IAAI,EAAG,kCACPC,IAAI,GAAI,iCACRC,SAAS,YACZC,MAAOL,EAAAA,KAAaK,MAAM,yBAAyBD,SAAS,cAW9D,OALAE,EAAAA,EAAAA,YAAU,WACHhB,GACLO,EAASU,EAAAA,EAAAA,SACV,GAAE,CAACjB,EAAYO,KAGd,UAAC,IAAD,YACE,SAAC,KAAD,CAASW,MAAM,UAAf,UACE,SAAC,KAAD,CACEC,cAxBc,CACpBJ,MAAO,GACPJ,SAAU,IAuBJF,iBAAkBA,EAClBW,SAfS,SAAAC,GACfvB,GAASwB,EAAAA,EAAAA,IAAMD,GAChB,EAUK,UAKE,UAAC,KAAD,WAhCO,CACb,CAAEE,MAAO,QAASC,KAAM,QAASC,KAAM,SACvC,CAAEF,MAAO,WAAYC,KAAM,WAAYC,KAAM,aA+B7BC,KAAI,gBAAGH,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAMC,EAAhB,EAAgBA,KAAhB,OACV,SAAC,IAAD,CAAsBF,MAAOA,EAAOC,KAAMA,EAAMC,KAAMA,GAAtCA,EADN,KAGZ,SAAC,KAAD,CAAQD,KAAK,SAAb,4BAKLnB,IAAW,SAAC,KAAD,IACXF,IAAS,6EAGf,C","sources":["pages/SignIn/SignIn.jsx"],"sourcesContent":["import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport { useNavigate } from 'react-router-dom';\n\nimport { routes } from 'helpers/routes';\n\nimport { selectedIsLoggedIn } from 'redux/auth/selectors';\nimport { selectError, selectLoader } from 'redux/contacts/selectors';\nimport { logIn } from 'redux/auth/auth-operations';\nimport { Button } from 'components/ContactForm/ContactForm.styled';\n\nimport { Loader, Section } from 'components';\nimport { Container } from 'common/common.styled';\nimport { TextField } from 'components/FormikForm/TextField';\n\nconst SignInForm = () => {\n  const dispatch = useDispatch();\n  const isLoggedIn = useSelector(selectedIsLoggedIn);\n  const error = useSelector(selectError);\n  const loading = useSelector(selectLoader);\n  const navigate = useNavigate();\n\n  const config = [\n    { label: 'Email', type: 'email', name: 'email' },\n    { label: 'Password', type: 'password', name: 'password' },\n  ];\n  const initialValues = {\n    email: '',\n    password: '',\n  };\n  const validationSchema = Yup.object({\n    password: Yup.string()\n      .min(7, 'Must be more than 7 characters')\n      .max(20, 'Must be 20 characters or less')\n      .required('Required'),\n    email: Yup.string().email('Invalid email address').required('Required'),\n  });\n  const onSubmit = values => {\n    dispatch(logIn(values));\n  };\n\n  useEffect(() => {\n    if (!isLoggedIn) return;\n    navigate(routes.CONTACTS);\n  }, [isLoggedIn, navigate]);\n\n  return (\n    <Container>\n      <Section title=\"Sign In\">\n        <Formik\n          initialValues={initialValues}\n          validationSchema={validationSchema}\n          onSubmit={onSubmit}\n        >\n          <Form>\n            {config.map(({ label, type, name }) => (\n              <TextField key={name} label={label} type={type} name={name} />\n            ))}\n            <Button type=\"submit\">Sign In</Button>\n          </Form>\n        </Formik>\n      </Section>\n\n      {loading && <Loader />}\n      {error && <div>Ooops, something went wrong.. Try a bit later</div>}\n    </Container>\n  );\n};\nexport default SignInForm;\n\n// import { useState, useEffect } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { useNavigate } from 'react-router-dom';\n\n// import { BsEnvelope, BsKey } from 'react-icons/bs';\n// import { routes } from 'helpers/routes';\n\n// import { Loader, Section } from 'components';\n// import { selectedIsLoggedIn } from 'redux/auth/selectors';\n// import { selectError, selectLoader } from 'redux/contacts/selectors';\n// import { logIn } from 'redux/auth/auth-operations';\n// import { Container } from 'common/common.styled';\n// import {\n//   Button,\n//   Input,\n//   Label,\n//   Span,\n// } from 'components/ContactForm/ContactForm.styled';\n\n// const SignInForm = () => {\n//   const dispatch = useDispatch();\n//   const isLoggedIn = useSelector(selectedIsLoggedIn);\n//   const error = useSelector(selectError);\n//   const loading = useSelector(selectLoader);\n//   const navigate = useNavigate();\n\n//   const [email, setEmail] = useState('');\n//   const [password, setPassword] = useState('');\n\n//   useEffect(() => {\n//     if (!isLoggedIn) return;\n//     navigate(routes.CONTACTS);\n//   }, [isLoggedIn, navigate]);\n\n//   const handleInputChange = evt => {\n//     const { name, value } = evt.target;\n\n//     if (name === 'email') setEmail(value);\n//     if (name === 'password') setPassword(value);\n//   };\n\n//   const handleSubmit = evt => {\n//     evt.preventDefault();\n//     dispatch(logIn({ email, password }));\n\n//     setEmail('');\n//     setPassword('');\n//   };\n\n//   return (\n//     <Container>\n//       <Section title=\"Sign In\">\n//         <form onSubmit={handleSubmit}>\n//           <Label>\n//             <Span>Email</Span>\n//             <BsEnvelope size={15} className=\"icon\" />\n//             <Input\n//               type=\"email\"\n//               name=\"email\"\n//               required\n//               value={email}\n//               onChange={handleInputChange}\n//             />\n//           </Label>\n//           <Label>\n//             <Span>Password</Span>\n//             <BsKey size={15} className=\"icon\" />\n//             <Input\n//               type=\"password\"\n//               name=\"password\"\n//               required\n//               value={password}\n//               onChange={handleInputChange}\n//             />\n//           </Label>\n//           <Button type=\"submit\">Sign In</Button>\n//         </form>\n//       </Section>\n\n//       {loading && <Loader />}\n//       {error && <div>Ooops, something went wrong.. Try a bit later</div>}\n//     </Container>\n//   );\n// };\n// export default SignInForm;\n"],"names":["dispatch","useDispatch","isLoggedIn","useSelector","selectedIsLoggedIn","error","selectError","loading","selectLoader","navigate","useNavigate","validationSchema","Yup","password","min","max","required","email","useEffect","routes","title","initialValues","onSubmit","values","logIn","label","type","name","map"],"sourceRoot":""}